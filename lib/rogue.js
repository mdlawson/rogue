// Generated by CoffeeScript 1.3.3
(function() {
  var Game, GameLoop, Log, Rogue, RollingAverage, TileMap, math, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  TileMap = (function() {

    function TileMap(options) {
      var calc, d, dirs, x, y, _i, _j, _ref, _ref1;
      this.res = options.res || [32, 32];
      this.size = options.size || [100, 100];
      this.tiles = (function() {
        var _i, _ref, _results;
        _results = [];
        for (y = _i = 0, _ref = this.size[1]; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (x = _j = 0, _ref1 = this.size[0]; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
              _results1.push({});
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      dirs = {
        s: [0, 1],
        e: [1, 0],
        n: [0, -1],
        w: [-1, 0]
      };
      for (x = _i = 0, _ref = this.size[0]; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.size[1]; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.tiles[x][y].x = x;
          this.tiles[x][y].y = y;
          this.tiles[x][y].content = [];
          for (d in dirs) {
            calc = dirs[d];
            this.tiles[x][y][d] = (this.tiles[x + calc[0]] != null) && (this.tiles[x + calc[0]][y + calc[1]] != null) ? this.tiles[x + calc[0]][y + calc[1]] : null;
          }
        }
      }
    }

    TileMap.prototype.place = function(obj) {
      var _this = this;
      if (obj.forEach) {
        obj.forEach(function(item) {
          return _this.place(item);
        });
        return obj;
      }
      obj.tile = this.tiles[obj.x][obj.y];
      return this.tiles[obj.x][obj.y].push(obj);
    };

    TileMap.prototype.lookup = function(x, y) {
      return this.tiles[x][y].content;
    };

    TileMap.prototype.clear = function() {
      var col, tile, _i, _len, _ref, _results;
      _ref = this.tiles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        col = _ref[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = col.length; _j < _len1; _j++) {
            tile = col[_j];
            _results1.push(tile.content = []);
          }
          return _results1;
        })());
      }
      return _results;
    };

    return TileMap;

  })();

  Game = (function() {

    function Game(options) {
      var _ref, _ref1;
      this.options = options;
      if ((options != null ? options.canvas : void 0) != null) {
        this.canvas = document.getElementById(options.canvas);
      }
      if (!(this.canvas != null)) {
        this.canvas = document.createElement("canvas");
        document.body.appendChild(this.canvas);
      }
      this.width = this.canvas.width = (_ref = options != null ? options.width : void 0) != null ? _ref : 400;
      this.height = this.canvas.height = (_ref1 = options != null ? options.height : void 0) != null ? _ref1 : 300;
      this.context = this.canvas.getContext('2d');
    }

    Game.prototype.start = function(state) {
      var loading, _ref;
      this.state = state;
      loading = (_ref = this.options.loadingScreen) != null ? _ref : function() {};
      return switchState(this.state);
    };

    Game.prototype.switchState = function(state) {
      this.loop && this.loop.stop();
      this.oldState = this.state;
      this.loop = new GameLoop(this.state);
      return this.loop.start();
    };

    return Game;

  })();

  GameLoop = (function() {

    function GameLoop(state) {
      this.state = state;
      this.loop = __bind(this.loop, this);

      this.fps = 0;
      this.paused = this.stopped = false;
      this.averageFPS = new RollingAverage(20);
    }

    GameLoop.prototype.start = function() {
      var currentTick, firstTick, lastTick;
      firstTick = currentTick = lastTick = (new Date()).getTime();
      return requestAnimFrame(this.loop);
    };

    GameLoop.prototype.loop = function() {
      this.currentTick = (new Date()).getTime();
      this.tickDuration = this.currentTick - this.lastTick;
      this.fps = this.averageFPS.add(1000 / this.tickDuration);
      if (!(this.stopped || this.paused)) {
        this.state.update();
        this.state.draw();
      }
      if (!this.stopped) {
        requestAnimFrame(this.loop);
      }
      return this.lastTick = this.currentTick;
    };

    GameLoop.prototype.pause = function() {
      return this.paused = true;
    };

    GameLoop.prototype.stop = function() {
      return this.stopped = true;
    };

    return GameLoop;

  })();

  RollingAverage = (function() {

    function RollingAverage(size) {
      this.size = size;
      this.values = new Array(this.size);
      this.count = 0;
    }

    RollingAverage.prototype.add = function(value) {
      this.values = this.values.slice(1, this.size);
      this.values.push(value);
      if (this.count < this.size) {
        this.count++;
      }
      return parseInt((this.values.reduce(function(t, s) {
        return t + s;
      })) / this.count);
    };

    return RollingAverage;

  })();

  Log = {
    trace: true,
    logPrefix: '(Rogue)',
    log: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!this.trace) {
        return;
      }
      if (this.logPrefix) {
        args.unshift(this.logPrefix);
      }
      if (typeof console !== "undefined" && console !== null) {
        if (typeof console.log === "function") {
          console.log.apply(console, args);
        }
      }
      return this;
    }
  };

  util = {
    isArray: function(value) {
      return Object.prototype.toString.call(value) === '[object Array]';
    }
  };

  math = {
    round: function(num) {
      return (0.5 + num) | 0;
    }
  };

  window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;

  Rogue = this.Rogue = {};

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Rogue;
  }

  Rogue.util = util;

  Rogue.math = math;

  Rogue.Game = Game;

  Rogue.GameLoop = GameLoop;

  Rogue.TileMap = TileMap;

}).call(this);
